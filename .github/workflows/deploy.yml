name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch: # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          echo "🚀 Starting deployment..."
          
          # 进入项目目录
          cd ~/scraper || exit 1
          
          # 拉取最新代码
          echo "📥 Pulling latest code from GitHub..."
          git pull origin main
          
          # 检查Chrome是否已安装
          if ! command -v google-chrome &> /dev/null; then
            echo "🔧 Chrome not found, installing..."
            chmod +x scripts/deployment/install_chrome.sh
            ./scripts/deployment/install_chrome.sh
          else
            echo "✅ Chrome already installed: $(google-chrome --version)"
          fi
          
          # 检查是否需要更新依赖
          if git diff HEAD@{1} HEAD -- requirements.txt | grep -q '^[+-]'; then
            echo "📦 Requirements changed, updating dependencies..."
            pip3 install -r requirements.txt --user --upgrade
          fi
          
          # 重启服务
          echo "🔄 Restarting services..."
          
          # 使用服务脚本停止和启动
          if [ -f scripts/services/stop_services.sh ]; then
            chmod +x scripts/services/stop_services.sh
            ./scripts/services/stop_services.sh || true
          else
            # 回退方案：手动停止
            pkill -f simple_app.py || true
            pkill -f scheduler_daemon.py || true
            sleep 2
          fi
          
          # 清理可能占用的端口
          lsof -ti:8080 | xargs kill -9 2>/dev/null || true
          
          # 启动服务（后台运行，避免SSH超时）
          if [ -f scripts/services/start_services.sh ]; then
            chmod +x scripts/services/start_services.sh
            nohup ./scripts/services/start_services.sh > /tmp/deploy_start.log 2>&1 &
            sleep 5
            
            # 检查服务是否启动成功
            if pgrep -f simple_app.py > /dev/null && pgrep -f scheduler_daemon.py > /dev/null; then
              echo "✅ Services started successfully"
              ps aux | grep python3 | grep -v grep
            else
              echo "❌ Services failed to start"
              cat /tmp/deploy_start.log
              exit 1
            fi
          else
            # 回退方案：手动启动
            cd ~/scraper
            # 加载环境变量
            if [ -f .env ]; then
              export $(cat .env | grep -v '^#' | grep -v '^$' | xargs)
            fi
            nohup python3 simple_app.py > app.log 2>&1 &
            nohup python3 scheduler_daemon.py > scheduler.log 2>&1 &
            sleep 5
            
            # 检查进程
            if pgrep -f simple_app.py > /dev/null; then
              echo "✅ Web app is running"
            else
              echo "❌ Web app failed to start"
              tail -20 app.log
              exit 1
            fi
            
            if pgrep -f scheduler_daemon.py > /dev/null; then
              echo "✅ Scheduler is running"
            else
              echo "❌ Scheduler failed to start"
              tail -20 scheduler.log
              exit 1
            fi
          fi
          
          echo "✅ Deployment completed successfully!"
          echo "📊 Current running processes:"
          ps aux | grep python3 | grep -v grep

