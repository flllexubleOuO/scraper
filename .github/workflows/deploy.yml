name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch: # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        command_timeout: 10m
        script: |
          echo "🚀 Starting deployment..."
          
          # 进入项目目录
          cd ~/scraper || exit 1
          
          # 拉取最新代码
          echo "📥 Pulling latest code from GitHub..."
          git pull origin main
          
          # 检查Chrome是否已安装
          if ! command -v google-chrome &> /dev/null; then
            echo "🔧 Chrome not found, installing..."
            chmod +x scripts/deployment/install_chrome.sh
            ./scripts/deployment/install_chrome.sh
          else
            echo "✅ Chrome already installed: $(google-chrome --version)"
          fi
          
          # 检查是否需要更新依赖
          if git diff HEAD@{1} HEAD -- requirements.txt | grep -q '^[+-]'; then
            echo "📦 Requirements changed, updating dependencies..."
            pip3 install -r requirements.txt --user --upgrade
          fi
          
          # 部署新版本（让新进程替换旧进程）
          echo "🔄 Deploying new version..."
          
          # 创建部署脚本（在SSH断开后继续运行）
          cat > ~/scraper/deploy_bg.sh << 'DEPLOY_SCRIPT'
          #!/bin/bash
          # 等待一下确保SSH已断开
          sleep 2
          
          # 停止旧进程
          pkill -f simple_app.py 2>/dev/null || true
          pkill -f scheduler_daemon.py 2>/dev/null || true
          sleep 1
          
          # 强制清理
          pkill -9 -f simple_app.py 2>/dev/null || true
          pkill -9 -f scheduler_daemon.py 2>/dev/null || true
          fuser -k 8080/tcp 2>/dev/null || true
          sleep 1
          
          # 加载环境变量
          cd ~/scraper
          if [ -f .env ]; then
            export $(cat .env | grep -v '^#' | grep -v '^$' | xargs) 2>/dev/null || true
          fi
          
          # 启动新进程
          nohup python3 simple_app.py > app.log 2>&1 &
          nohup python3 scheduler_daemon.py > scheduler.log 2>&1 &
          
          # 记录部署结果
          sleep 3
          if pgrep -f simple_app.py > /dev/null && pgrep -f scheduler_daemon.py > /dev/null; then
            echo "$(date): Deployment successful" >> ~/scraper/deploy.log
          else
            echo "$(date): Deployment failed" >> ~/scraper/deploy.log
          fi
          DEPLOY_SCRIPT
          
          # 设置执行权限并在后台运行
          chmod +x ~/scraper/deploy_bg.sh
          nohup ~/scraper/deploy_bg.sh > /dev/null 2>&1 &
          
          echo "✅ Deployment script started in background"
          echo "📝 Background deployment will complete in ~10 seconds"
          echo "📊 Check deployment status:"
          echo "   tail -f ~/scraper/deploy.log"
          echo "   ps aux | grep python3"
          
          echo ""
          echo "🎉 GitHub Actions deployment completed!"
          echo "⏳ Services are restarting in background..."

